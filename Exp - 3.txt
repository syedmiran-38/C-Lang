-- Creating the departments table
CREATE TABLE departments (
    department_id INT PRIMARY KEY,
    department_name VARCHAR(50)
);


-- Creating the employees table
CREATE TABLE employees (
    employee_id INT PRIMARY KEY,
    employee_name VARCHAR(50),
    department_id INT,
    salary DECIMAL(10, 2),
    job_title VARCHAR(50),
    manager_id INT,
    city VARCHAR(50),
    FOREIGN KEY (department_id) REFERENCES departments(department_id)
);


-- Inserting data into the departments table
INSERT INTO departments (department_id, department_name) VALUES
(1, 'Sales'),
(2, 'HR'),
(3, 'IT');


-- Inserting data into the employees table
INSERT INTO employees (employee_id, employee_name, department_id, salary, job_title, manager_id, city) VALUES
(1, 'Alice', 1, 12000, 'Manager', NULL, 'Baroda'),
(2, 'Bob', 1, 9000, 'Salesman', 1, 'Ahmedabad'),
(3, 'Charlie', 2, 11000, 'HR Executive', 4, 'Baroda'),
(4, 'David', 2, 8000, 'Clerk', 5, 'Surat'),
(5, 'Eve', 3, 13000, 'IT Manager', NULL, 'Baroda'),
(6, 'Frank', 3, 9500, 'Developer', 5, 'Baroda');


-- 1) Define: Join. Explain self join.
-- A Join in SQL is used to combine rows from two or more tables, based on a related column between them.
-- A self join is a regular join but the table is joined with itself.


-- 2) Retrieve employee number, employee name and their department name, in department name order.
SELECT e.employee_id, e.employee_name, d.department_name
FROM employees e
JOIN departments d ON e.department_id = d.department_id
ORDER BY d.department_name;


-- 3) Show all employee details who lives in Baroda.
SELECT * FROM employees
WHERE city = 'Baroda';


-- 4) Display the name, salary and department number of employees whose salary is more than 10000.
SELECT employee_name, salary, department_id
FROM employees
WHERE salary > 10000;


-- 5) List the employee name, job, salary and department name for everyone in the company except clerks. Sort on salary displaying the highest salary first.
SELECT e.employee_name, e.job_title, e.salary, d.department_name
FROM employees e
JOIN departments d ON e.department_id = d.department_id
WHERE e.job_title != 'Clerk'
ORDER BY e.salary DESC;


-- 6) List all employees by name and number along with their manager’s name and number.
SELECT e.employee_id, e.employee_name, m.employee_id AS manager_id, m.employee_name AS manager_name
FROM employees e
LEFT JOIN employees m ON e.manager_id = m.employee_id;


-- 7) Display all the employees who earn less than their managers.
SELECT e.employee_id, e.employee_name, e.salary, m.employee_id AS manager_id, m.salary AS manager_salary
FROM employees e
JOIN employees m ON e.manager_id = m.employee_id
WHERE e.salary < m.salary;